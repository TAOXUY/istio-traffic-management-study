apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: grpc-transcorder
spec:
  workloadSelector:
    labels:
      app.kubernetes.io/name: bookstoreserver
  configPatches:
  - applyTo: HTTP_FILTER
    match:
      context: GATEWAY
      listener:
        portNumber: 8080
        filterChain:
          filter:
            name: "envoy.filters.network.http_connection_manager"
            subFilter:
              name: "envoy.filters.http.router"
    patch:
      operation: INSERT_BEFORE
      value:
        name: envoy.grpc_json_transcoder
        typed_config:
          '@type': type.googleapis.com/envoy.extensions.filters.http.grpc_json_transcoder.v3.GrpcJsonTranscoder
          protoDescriptorBin: >
            
          services:
          - endpoints.examples.bookstore.Bookstore
          print_options:
            add_whitespace: true
            always_print_primitive_fields: true
            always_print_enums_as_ints: false
            preserve_proto_field_names: false

